name: CD

on:
  push:
    branches: [ master ]
  workflow_dispatch:

# concurrency required to avoid terraform lock contention during ECR provisioning
concurrency: cd-${{ github.repository }}-pipeline

jobs:
  deploy-stage:
    name: Deploy to Stage env
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: staging
  
    permissions:
      id-token: write
      contents: read
  
    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}
       
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACCESS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHub-OIDC-Terraform
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
  
      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"
          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV
  
      - name: Create TF Backend S3 Bucket if it doesn't exist
        shell: bash
        run: |
          set -eux
          BUCKET_NAME=${{ vars.BACKEND_S3_BUCKET }}-${{ secrets.AWS_ACCOUNT_ID }}
          REGION=${{ vars.AWS_REGION }}
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
            echo "Bucket $BUCKET_NAME created in $REGION"
          else
            echo "Bucket $BUCKET_NAME already exists"
          fi
  
      - name: Create TF State Lock DynamoDB Table if it doesn't exist
        run: |
          set -eux
          TABLE_NAME=${{ vars.BACKEND_DYNAMODB_TABLE }}
          REGION=${{ vars.AWS_REGION }}
          # Check if the table exists
          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" &>/dev/null; then
            # Create the table
            aws dynamodb create-table \
              --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$REGION"
            echo "DynamoDB table $TABLE_NAME created in $REGION"
          else
            echo "DynamoDB table $TABLE_NAME already exists"
          fi

      - name: TF init
        shell: bash
        run: |
          set -eux
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ vars.AWS_REGION }}' \
            -backend-config='bucket=${{ vars.BACKEND_S3_BUCKET }}-${{ secrets.AWS_ACCOUNT_ID }}' \
            -backend-config='key=docker-terraform-${{ vars.DB_SCOPE_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ vars.BACKEND_DYNAMODB_TABLE }}' \
            -backend-config='role_arn=${{ secrets.AWS_BACKEND_ACCESS_ROLE }}'
        working-directory: ./infrastructure
  
      - name: TF apply
        shell: bash
        run: |
          set -eux
          terraform apply \
            -var 'backend_repository_name=${{ vars.BACKEND_ECR_REPO_NAME }}' \
            -var 'frontend_repository_name=${{ vars.FRONTEND_ECR_REPO_NAME }}' \
            -var 'cypress_repository_name=${{ vars.CYPRESS_ECR_REPO_NAME }}' \
            -var 'ecs_cluster_name=${{ vars.ECS_CLUSTER_NAME }}' \
            -var 'backend_image_tag=${{ vars.BACKEND_IMAGE_TAG }}' \
            -var 'frontend_image_tag=${{ vars.FRONTEND_IMAGE_TAG }}' \
            -var 'cypress_image_tag=${{ vars.CYPRESS_IMAGE_TAG }}' \
            -var 'lifecycle_policy=./policy.json' \
            -var 'iam_role=${{ secrets.AWS_BACKEND_ACCESS_ROLE }}' \
            -var 'aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}' \
            -auto-approve
        working-directory: ./infrastructure
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}
          mask-password: "true"
  
      - name: Build, tag, and push backend image to Amazon ECR
        id: build-publish-backend
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.BACKEND_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ vars.BACKEND_IMAGE_TAG }}
        run: |
          docker build "./api" -f "./api/Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-publish-frontend
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.FRONTEND_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ vars.FRONTEND_IMAGE_TAG }}
        run: |
          docker build "./frontend" -f "./frontend/Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push testing image to Amazon ECR
        id: build-publish-testing
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.CYPRESS_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ vars.CYPRESS_IMAGE_TAG }}
        run: |
          docker build "./frontend/cypress" -f "./frontend/cypress/Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Update ECS Service with new backend image
        id: update-ecs-backend
        shell: bash
        run: |
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_NAME }} --service ${{ vars.ECS_BACKEND_SERVICE_NAME }} --force-new-deployment
          echo "ECS backend service updated with new image"
  
      - name: Update ECS Service with new frontend image
        id: update-ecs-frontend
        shell: bash
        run: |
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_NAME }} --service ${{ vars.ECS_FRONTEND_SERVICE_NAME }} --force-new-deployment
          echo "ECS frontend service updated with new image"
      
      - name: Update ECS Service with new cypress image
        id: update-ecs-cypress
        shell: bash
        run: |
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_NAME }} --service ${{ vars.ECS_CYPRESS_SERVICE_NAME }} --force-new-deployment
          echo "ECS cypress service updated with new image"


  deploy-prod:
    name: Deploy to Prod env
    needs: [deploy-stage]
    runs-on: ubuntu-latest
    environment:
      name: production
  
    permissions:
      id-token: write
      contents: read
  
    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}
       
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACCESS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHub-OIDC-Terraform
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
  
      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"
          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV
  
      - name: Create TF Backend S3 Bucket if it doesn't exist
        shell: bash
        run: |
          set -eux
          BUCKET_NAME=${{ vars.BACKEND_S3_BUCKET }}-${{ secrets.AWS_ACCOUNT_ID }}
          REGION=${{ vars.AWS_REGION }}
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
            echo "Bucket $BUCKET_NAME created in $REGION"
          else
            echo "Bucket $BUCKET_NAME already exists"
          fi
  
      - name: Create TF State Lock DynamoDB Table if it doesn't exist
        run: |
          set -eux
          TABLE_NAME=${{ vars.BACKEND_DYNAMODB_TABLE }}
          REGION=${{ vars.AWS_REGION }}
          # Check if the table exists
          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" &>/dev/null; then
            # Create the table
            aws dynamodb create-table \
              --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$REGION"
            echo "DynamoDB table $TABLE_NAME created in $REGION"
          else
            echo "DynamoDB table $TABLE_NAME already exists"
          fi

      - name: TF init
        shell: bash
        run: |
          set -eux
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ vars.AWS_REGION }}' \
            -backend-config='bucket=${{ vars.BACKEND_S3_BUCKET }}-${{ secrets.AWS_ACCOUNT_ID }}' \
            -backend-config='key=docker-terraform-${{ vars.DB_SCOPE_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ vars.BACKEND_DYNAMODB_TABLE }}' \
            -backend-config='role_arn=${{ secrets.AWS_BACKEND_ACCESS_ROLE }}'
        working-directory: ./infrastructure
  
      - name: TF apply
        shell: bash
        run: |
          set -eux
          terraform apply \
            -var 'backend_repository_name=${{ vars.BACKEND_ECR_REPO_NAME }}' \
            -var 'frontend_repository_name=${{ vars.FRONTEND_ECR_REPO_NAME }}' \
            -var 'cypress_repository_name=${{ vars.CYPRESS_ECR_REPO_NAME }}' \
            -var 'lifecycle_policy=./policy.json' \
            -var 'iam_role=${{ secrets.AWS_BACKEND_ACCESS_ROLE }}' \
            -var 'aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}' \
            -auto-approve
        working-directory: ./infrastructure
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}
          mask-password: "true"
  
      - name: Build, tag, and push backend image to Amazon ECR
        id: build-publish-backend
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.BACKEND_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ vars.BACKEND_IMAGE_TAG }}
        run: |
          docker build "./api" -f "./api/Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-publish-frontend
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.FRONTEND_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ vars.FRONTEND_IMAGE_TAG }}
        run: |
          docker build "./frontend" -f "./frontend/Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push testing image to Amazon ECR
        id: build-publish-testing
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.CYPRESS_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ vars.CYPRESS_IMAGE_TAG }}
        run: |
          docker build "./frontend/cypress" -f "./frontend/cypress/Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Update ECS Service with new backend image
        id: update-ecs-backend
        shell: bash
        run: |
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_NAME }} --service ${{ vars.ECS_BACKEND_SERVICE_NAME }} --force-new-deployment
          echo "ECS backend service updated with new image"
    
      - name: Update ECS Service with new frontend image
        id: update-ecs-frontend
        shell: bash
        run: |
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_NAME }} --service ${{ vars.ECS_FRONTEND_SERVICE_NAME }} --force-new-deployment
          echo "ECS frontend service updated with new image"
        
      - name: Update ECS Service with new cypress image
        id: update-ecs-cypress
        shell: bash
        run: |
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_NAME }} --service ${{ vars.ECS_CYPRESS_SERVICE_NAME }} --force-new-deployment
          echo "ECS cypress service updated with new image"
