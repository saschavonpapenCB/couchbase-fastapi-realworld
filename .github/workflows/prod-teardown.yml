name: Production Deployment Teardown

on:
  workflow_dispatch:

jobs:
  stage-teardown:
    name: Teardown Production deployment
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: read
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACCESS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHub-OIDC-Terraform
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
    
      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"
          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV
        
      - name: Create TF Backend S3 Bucket if it doesn't exist
        shell: bash
        run: |
          set -eux
          BUCKET_NAME=${{ vars.BACKEND_S3_BUCKET }}-${{ secrets.AWS_ACCOUNT_ID }}
          REGION=${{ vars.AWS_REGION }}
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
            echo "Bucket $BUCKET_NAME created in $REGION"
          else
            echo "Bucket $BUCKET_NAME already exists"
          fi
        
      - name: Create TF State Lock DynamoDB Table if it doesn't exist
        run: |
          set -eux
          TABLE_NAME=${{ vars.BACKEND_DYNAMODB_TABLE }}
          REGION=${{ vars.AWS_REGION }}
          # Check if the table exists
          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" &>/dev/null; then
            # Create the table
            aws dynamodb create-table \
              --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$REGION"
            echo "DynamoDB table $TABLE_NAME created in $REGION"
          else
            echo "DynamoDB table $TABLE_NAME already exists"
          fi
    
      - name: TF init
        shell: bash
        run: |
          set -eux
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ vars.AWS_REGION }}' \
            -backend-config='bucket=${{ vars.BACKEND_S3_BUCKET }}-${{ secrets.AWS_ACCOUNT_ID }}' \
            -backend-config='key=docker-terraform-${{ vars.DB_SCOPE_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ vars.BACKEND_DYNAMODB_TABLE }}' \
            -backend-config='role_arn=${{ secrets.AWS_BACKEND_ACCESS_ROLE }}'
        working-directory: ./infrastructure
    
      - name: TF destroy
        shell: bash
        run: |
          set -eux
          terraform destroy \
            -var 'backend_repository_name=${{ vars.BACKEND_ECR_REPO_NAME }}' \
            -var 'frontend_repository_name=${{ vars.FRONTEND_ECR_REPO_NAME }}' \
            -var 'cypress_repository_name=${{ vars.CYPRESS_ECR_REPO_NAME }}' \
            -var 'lifecycle_policy=./policy.json' \
            -var 'iam_role=${{ secrets.AWS_BACKEND_ACCESS_ROLE }}' \
            -var 'aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}' \
            -auto-approve
        working-directory: ./infrastructure
